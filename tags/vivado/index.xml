<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vivado on Blog de Preminstrel</title>
    <link>https://preminstrel.github.io/blog/tags/vivado/</link>
    <description>Recent content in Vivado on Blog de Preminstrel</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>preminstrel@gmail.com (Hanshi Sun)</managingEditor>
    <webMaster>preminstrel@gmail.com (Hanshi Sun)</webMaster>
    <lastBuildDate>Mon, 18 Oct 2021 20:05:26 +0800</lastBuildDate><atom:link href="https://preminstrel.github.io/blog/tags/vivado/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vivado ILA</title>
      <link>https://preminstrel.github.io/blog/post/2021/10/18/vivado-ila/</link>
      <pubDate>Mon, 18 Oct 2021 20:05:26 +0800</pubDate>
      <author>preminstrel@gmail.com (Hanshi Sun)</author>
      <guid>https://preminstrel.github.io/blog/post/2021/10/18/vivado-ila/</guid>
      
      <description>&lt;p&gt;进行 FPGA 开发的过程中，在逻辑代码上板运行前都会进行&lt;strong&gt;仿真验证&lt;/strong&gt;，而 EDA 仿真工具（如Modelsim等）的使用更是可以可以让工程师提早发现工程中出现的一些错误。&lt;/p&gt;
&lt;p&gt;但这&lt;strong&gt;并不代表&lt;/strong&gt;经过仿真工具验证后的设计就能够达到预期。事实上，在上板运行时仍有可能遇到各种各样的问题。使用仿真工具进行验证的时候所设计 Testbench 的激励输入有时不能囊括一切可能发生的情况，并且由于软件仿真与实际硬件之间总是存在着细微的差别，诸如此类的原因导致工程师在上板运行时仍会发现各种设计问题。而很多情况下，在 FPGA 实时运行中需要查看某些信号，因此需要一个&lt;strong&gt;实时的信号分析工具获取 FPGA 内部的实时信号从而进行调试分析&lt;/strong&gt;，于是我们便用到了 Vivado 里面的 ILA。&lt;/p&gt;
&lt;p&gt;ILA 是 Vivado 软件里包含的一款&lt;strong&gt;可定制集成逻辑分析器 (ILA) IP 核&lt;/strong&gt;，是一款逻辑分析器内核， 可用于监控设计中的内部信号。ILA 内核包括现代逻辑分析器的大量高级特性，如布尔触发器方程式以及边缘过渡触发器。ILA 也是 Vivado 里最常用的工具，需要我们熟练掌握。&lt;/p&gt;
&lt;h1 id=&#34;basic-concepts&#34;&gt;Basic Concepts&lt;/h1&gt;
&lt;p&gt;在调试过程中，某些需要观察分析的信号被称为&lt;strong&gt;被测信号&lt;/strong&gt;，可以存在多个被测信号。&lt;/p&gt;
&lt;p&gt;ILA 的基本工作过程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以被测信号为对象，根据需要设置合理的触发条件，在触发条件满足时的前后一段时间，每个采样时钟的上升沿会对被测信号进行一次采集，并将采集的信号值存储在内部的 RAM 中。&lt;/li&gt;
&lt;li&gt;工程师可以指定触发条件前后采多少个样点，如果 RAM 比较大，则 可以保存比较多的数据。反之，如果 RAM比较小，那么保存的数据自然比较少，RAM 大小决定了观察数据的多少。&lt;/li&gt;
&lt;li&gt;最后 ILA 将读出 RAM 中的数据并逐个在显示器中显示出来，因此 ILA 观测到的都是&lt;strong&gt;理想的，没有毛刺的信号&lt;/strong&gt;，工程师可以在显示器中观测信号，从而达到对信号进行在线调试分析的目的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;usage&#34;&gt;Usage&lt;/h1&gt;
&lt;p&gt;To be continued&amp;hellip;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Vivado Basics</title>
      <link>https://preminstrel.github.io/blog/post/2021/10/17/vivado-basics/</link>
      <pubDate>Sun, 17 Oct 2021 17:03:41 +0800</pubDate>
      <author>preminstrel@gmail.com (Hanshi Sun)</author>
      <guid>https://preminstrel.github.io/blog/post/2021/10/17/vivado-basics/</guid>
      
      <description>&lt;p&gt;在学习 FPGA 的过程中，我们需要用到 Vivado软件，这里我用的是 Vivado2021.1版本的软件。一般来说， FPGA 开发的流程分为以下几个部分来实现。&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;
graph LR
    id1(Create Project)--&gt;id2(Code)--&gt;id3(Complie)--&gt;id4(Assign Pins)--&gt;id5(Program Device)--&gt;id6(Debug)--&gt;id7(Program Flash)
    id6-.-&gt;id2
&lt;/div&gt;
&lt;h2 id=&#34;create-project&#34;&gt;Create Project&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Project Name&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以新建一个工程，注意，location 中可以选择 &lt;code&gt;create project subdirectory&lt;/code&gt; 来创建存放工程的文件夹，这一步的引导比较简单。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Project Type&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;选择 &lt;code&gt;RTL Project&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Add Sources&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们可以将之前已经写好的 Verilog 等文件加进工程中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Default Part&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;选择合适的芯片型号&lt;/p&gt;
&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;
&lt;p&gt;这里用 Verilog 写代码，编辑器建议用 VS Code。设计了一个双路灯控电路&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;module&lt;/span&gt; light(
    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;input&lt;/span&gt; x1,
    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;input&lt;/span&gt; x2,
    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;output&lt;/span&gt; f
);

&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;assign&lt;/span&gt; f &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; (x1 &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt;x2) &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; (&lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt;x1 &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt; x2)
        
&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;endmodule&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;写完代码后直接 &lt;code&gt;Add Sources&lt;/code&gt; 添加文件即可。&lt;/p&gt;
&lt;h2 id=&#34;compile&#34;&gt;Compile&lt;/h2&gt;
&lt;p&gt;设计完整个工程之后，要经过 Vivado 软件中几个工具的处理，分别是&lt;strong&gt;分析代码、综合电路以及生成目标芯片&lt;/strong&gt;的实现内容。这些应用工具被聚集在一起，统称为编译器。&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;
graph LR
    id1(Run Synthesis)--&gt;id2(Run Implementation)--&gt;id3(Generate Bitstream)
&lt;/div&gt;
&lt;p&gt;如果工程编译不通过，那么信息栏里就会提示报 Bug。建议&lt;strong&gt;查阅 &lt;em&gt;Log&lt;/em&gt; 一栏下的报错信息&lt;/strong&gt;，因为 Log 一栏下的信息打印是按&lt;strong&gt;顺序&lt;/strong&gt;来进行的，那么在进行问题定位的时候就方便查找第一个报错的信息。一般来说， 往往后面顺序的信息很多都是由于第一个报错原因导致的，所以解决了第一个报错问题，基本上就可以同时解决其它的报错问题了。要注意的是，&lt;strong&gt;报错信息栏里的提示不会随时更新，它的信息是过时的&lt;/strong&gt;，在解决了某些问题或者修改了代码后请&lt;strong&gt;重新编译更新信息状态栏&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;assign-pins&#34;&gt;Assign Pins&lt;/h2&gt;
&lt;p&gt;Vivado 需要先对工程进行编译再进行管脚配置，编译完后 ，在左侧工具栏中选 中 &lt;code&gt;IMPLEMENTATION&lt;/code&gt;，然后选择 &lt;code&gt;Open Implemented Design&lt;/code&gt;，在随后跳转的窗口右上角选择切换到 &lt;code&gt;I/O Planning&lt;/code&gt;，开始管脚配置。&lt;/p&gt;
&lt;p&gt;配置完成后，保存管脚配置信息，命名管脚约束文件名后， 点击 &lt;code&gt;OK&lt;/code&gt; 生成管脚约束文件。&lt;/p&gt;
&lt;h2 id=&#34;program-device&#34;&gt;Program Device&lt;/h2&gt;
&lt;p&gt;引脚分配完毕之后，需要重新进行一次&lt;strong&gt;全编译&lt;/strong&gt;。当全编译通过后 Vivado 软件即可生成可以烧录到 FPGA 中的配置文件。将下载器 USB-Blaster 与 FPGA 开发板进行连接，打开 FPGA 开发板电源后回到 Vivado 主界面，在左侧工具栏 &lt;code&gt;PROGRAM AND DEGUG&lt;/code&gt; 下展开 &lt;code&gt;Open Hardware Manager&lt;/code&gt;，点击 &lt;code&gt;Open Target&lt;/code&gt;，选择选项 &lt;code&gt;Auto Connect&lt;/code&gt;，连接下载器。&lt;/p&gt;
&lt;p&gt;在左侧工具栏 &lt;code&gt;PROGRAM AND DEGUG&lt;/code&gt; 下展开 &lt;code&gt;Open Hardware Manager&lt;/code&gt;，点击 &lt;code&gt;Program Device&lt;/code&gt;，选择相应的型号，打开下载界面。&lt;/p&gt;
&lt;h2 id=&#34;debug&#34;&gt;Debug&lt;/h2&gt;
&lt;p&gt;下载完毕后即可进行电路的测试，我们可以利用 ILA 工具进行问题的定位和错误的排查。&lt;/p&gt;
&lt;h2 id=&#34;program-flash&#34;&gt;Program Flash&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在 Vivado 软件里找到 &lt;code&gt;Settings&lt;/code&gt; 设置选项，进入后点击 &lt;code&gt;Bitstream&lt;/code&gt; 选项，将 &lt;code&gt;bin_file&lt;/code&gt; 勾选。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击 &lt;code&gt;Generate Bitstream&lt;/code&gt;，生成 &lt;code&gt;bit&lt;/code&gt; 文件和 &lt;code&gt;bin&lt;/code&gt; 文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开发板上电，点击 &lt;code&gt;Open Hardware Manager——Open Target——Auto Connect&lt;/code&gt;，连接板子。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 &lt;code&gt;Hardware&lt;/code&gt; 面板中右击 FPGA 器件，选择 &lt;code&gt;Add Configuration Memery Device&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在弹出的添加配置存储器的界面中，找到板载的 &lt;code&gt;Flash&lt;/code&gt; 存储器型号，完成添加。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;找到二进制 &lt;code&gt;bin&lt;/code&gt; 文件（&lt;code&gt;project_name\project_name.runs\impl_1\xxx.bin&lt;/code&gt;），选中进行代码烧写，实现上电自启动，完成程序固化。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下载完成，断电重上电后运行的就是固化的程序。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
  </channel>
</rss>
