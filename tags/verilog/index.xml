<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Verilog on Blog de Preminstrel</title>
    <link>https://preminstrel.github.io/blog/tags/verilog/</link>
    <description>Recent content in Verilog on Blog de Preminstrel</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>preminstrel@gmail.com (Hanshi Sun)</managingEditor>
    <webMaster>preminstrel@gmail.com (Hanshi Sun)</webMaster>
    <lastBuildDate>Sat, 16 Oct 2021 11:39:41 +0800</lastBuildDate><atom:link href="https://preminstrel.github.io/blog/tags/verilog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Verilog Basic Syntax</title>
      <link>https://preminstrel.github.io/blog/post/2021/10/16/verilog-basic-syntax/</link>
      <pubDate>Sat, 16 Oct 2021 11:39:41 +0800</pubDate>
      <author>preminstrel@gmail.com (Hanshi Sun)</author>
      <guid>https://preminstrel.github.io/blog/post/2021/10/16/verilog-basic-syntax/</guid>
      
      <description>&lt;h2 id=&#34;数据类型&#34;&gt;数据类型&lt;/h2&gt;
&lt;p&gt;Verilog HDL 区分大小写
Verilog HDL 的关键字（如 always、and、input等）都采用小写
Verilog HDL 的注释符和C++一样&lt;/p&gt;
&lt;h3 id=&#34;数字&#34;&gt;数字&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Syntax: &lt;code&gt;&amp;lt;bitwidth&amp;gt;&#39;&amp;lt;basis&amp;gt;&amp;lt;value&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;数制&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;进制符号&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;值&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Binary&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;b/B&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0,1, x, z&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;8&amp;rsquo;b11000101&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Octal&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o/O&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0~7, x, z&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;8&amp;rsquo;o305&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Decimal&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;d/D&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0~9&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4&amp;rsquo;d61&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Hexadecimal&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;h/H&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0~f, x, z&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;8&amp;rsquo;hc5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;常量&#34;&gt;常量&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Syntax: &lt;code&gt;parameter 参数名1=表达式, 参数名2=表达式, ...;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;parameter&lt;/span&gt; count_bits &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;;
&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;parameter&lt;/span&gt; sel &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;, code &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;8&amp;#39;ha3&lt;/span&gt;;
&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;parameter&lt;/span&gt; datawidth &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;; addrwidth &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; datawidth &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;好处：便于阅读、修改、增强 module 的通用性&lt;/p&gt;
&lt;h3 id=&#34;变量&#34;&gt;变量&lt;/h3&gt;
&lt;h4 id=&#34;category&#34;&gt;Category&lt;/h4&gt;
&lt;h5 id=&#34;网络型nets-type&#34;&gt;网络型（nets type）：&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;硬件电路中各种连接&lt;/li&gt;
&lt;li&gt;输出始终根据输入的变化而更新其值的变化&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Function&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;wire, tri&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;连线类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;wor, trior&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;多重驱动时，具有&lt;strong&gt;线或&lt;/strong&gt;功能的连线型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;wand, triand&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;多重驱动时，具有&lt;strong&gt;线与&lt;/strong&gt;功能的连线型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;tri1/tri0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;上拉电阻/下拉电阻&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;supply1/supply0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;电源（逻辑1）/地（逻辑0）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;wire型变量&lt;/strong&gt;
Syntax: &lt;code&gt;wire data1, data2, ..., datan;&lt;/code&gt;
Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;wire&lt;/span&gt; a, b, c
&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;wire&lt;/span&gt; [&lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;] databus  	&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;//define 8 bits data bus
&lt;/span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;wire&lt;/span&gt; [&lt;span style=&#34;color:#666&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;] addrbus 	&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;//define 20 bits address bus 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;最常用的 nets 型变量&lt;/li&gt;
&lt;li&gt;常用来表示用 assign 语句赋值的组合逻辑信号&lt;/li&gt;
&lt;li&gt;取值为 0，1，x，z&lt;/li&gt;
&lt;li&gt;Verilog HDL 模块中的输入/输出信号&lt;strong&gt;类型缺省&lt;/strong&gt;时，自动定义为&lt;em&gt;wire&lt;/em&gt;型变量&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;寄存器型register-type&#34;&gt;寄存器型（register type）：&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;硬件电路中具有状态保持作用的器件，如触发器和寄存器&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Instance&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;reg&lt;/td&gt;
&lt;td&gt;常用的register型变量&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;如触发器、寄存器等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;integer&lt;/td&gt;
&lt;td&gt;32位带符号整型变量&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;real&lt;/td&gt;
&lt;td&gt;64位带符号实数型变量&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;time&lt;/td&gt;
&lt;td&gt;无符号时间变量&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Syntax: &lt;code&gt;reg data1, data2, ..., datan;&lt;/code&gt;
Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;reg&lt;/span&gt; a, b, c
&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;reg&lt;/span&gt; [&lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;] databus  	        &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;//define 8 bits register
&lt;/span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;reg&lt;/span&gt; [&lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;] mymem[&lt;span style=&#34;color:#666&#34;&gt;1023&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;] 	&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;//define 1k bytes memory
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;运算符&#34;&gt;运算符&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;operator&lt;/th&gt;
&lt;th&gt;操作数&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;算术&lt;/td&gt;
&lt;td&gt;+, -, *, /, %&lt;/td&gt;
&lt;td&gt;双目&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;逻辑&lt;/td&gt;
&lt;td&gt;&amp;amp;&amp;amp;, !, ||&lt;/td&gt;
&lt;td&gt;双目/单目&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;位&lt;/td&gt;
&lt;td&gt;~, &amp;amp;, |, ^, ^~, ~^（按位同或）&lt;/td&gt;
&lt;td&gt;单目、双目&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;关系&lt;/td&gt;
&lt;td&gt;&amp;lt;, &amp;lt;=, &amp;gt;, &amp;gt;=&lt;/td&gt;
&lt;td&gt;双目&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;等式&lt;/td&gt;
&lt;td&gt;==, !=, ==== （全等）, !==&lt;/td&gt;
&lt;td&gt;双目&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;缩减&lt;/td&gt;
&lt;td&gt;&amp;amp;, |, ~&amp;amp;, ~|, ^, ^~, ~^&lt;/td&gt;
&lt;td&gt;单目&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;移位&lt;/td&gt;
&lt;td&gt;&amp;raquo;, &amp;laquo;&lt;/td&gt;
&lt;td&gt;单目&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;条件&lt;/td&gt;
&lt;td&gt;?:&lt;/td&gt;
&lt;td&gt;三目&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;连接&lt;/td&gt;
&lt;td&gt;{}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;== 和 ==== 的区别：前者结果可能为 x，而后者只有 0 和 1 两种。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;语句&#34;&gt;语句&lt;/h2&gt;
&lt;h3 id=&#34;过程块&#34;&gt;过程块&lt;/h3&gt;
&lt;h4 id=&#34;always-过程块&#34;&gt;always 过程块&lt;/h4&gt;
&lt;p&gt;当表达式的值发生改变时，就执行一遍块内语句&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;always 过程块是&lt;strong&gt;不能嵌套使用的&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;template&#34;&gt;Template&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;always&lt;/span&gt; @(&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;signal&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;)
&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;begin&lt;/span&gt;
	&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;//过程赋值
&lt;/span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;//if 语句
&lt;/span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;//case 语句
&lt;/span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;//while, repeat, for 语句
&lt;/span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;// task, functiony 调用
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;posedge-和-negedge-关键字&#34;&gt;posedge 和 negedge 关键字&lt;/h5&gt;
&lt;p&gt;clk 为同步时序电路的时钟信号，而 clear 为异步清零信号&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;//上升沿触发、高电平清零有效
&lt;/span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;always&lt;/span&gt; @(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;posedge&lt;/span&gt; clk &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;posedge&lt;/span&gt; clear)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;initial-过程块&#34;&gt;initial 过程块&lt;/h4&gt;
&lt;h5 id=&#34;template-1&#34;&gt;Template&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;initial&lt;/span&gt;
	&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;begin&lt;/span&gt;
		sentence1;
		sentence2;
		...;
	&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Example&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;initial&lt;/span&gt;
	&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;begin&lt;/span&gt;
		reg1&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;
		&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt; (addr &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; addr &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; size; addr &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; addr &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;)
			memory[addr] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;
	&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;说明&#34;&gt;说明&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;主要面向功能模拟，通常不具有可综合性，只用于测试文件（testbench）&lt;/li&gt;
&lt;li&gt;模拟 0 时刻开始执行，&lt;strong&gt;只执行一次&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;同一模块内的多个 initial 过程块，模拟 0 时刻开始&lt;strong&gt;并行&lt;/strong&gt;执行&lt;/li&gt;
&lt;li&gt;initial 过程块&lt;strong&gt;不能嵌套使用&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;赋值语句&#34;&gt;赋值语句&lt;/h3&gt;
&lt;h4 id=&#34;连续赋值语句assign&#34;&gt;连续赋值语句（assign）&lt;/h4&gt;
&lt;p&gt;常用于对 wire 型变量进行赋值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;input&lt;/span&gt; a, b;
&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;output&lt;/span&gt; c;
&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;assign&lt;/span&gt; c &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt; b;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;过程赋值语句&#34;&gt;过程赋值语句&lt;/h4&gt;
&lt;p&gt;常用于 reg 型变量进行赋值
&lt;strong&gt;非阻塞赋值&lt;/strong&gt;：一条非阻塞赋值语句的执行是不会阻塞下一条语句的执行，在本条非阻塞赋值语句执行完毕前，下一条语句也可开始执行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非阻塞赋值语句在过程块结束时才完成赋值操作，在一个过程块内的多个非阻塞赋值语句是并行执行的&lt;/li&gt;
&lt;li&gt;赋值符号 &lt;code&gt;&amp;lt;=&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;阻塞赋值&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;该语句结束时就完成赋值操作，前面的语句没有完成前，后面无法执行，所以在一个过程块中，多个阻塞赋值语句是顺序执行的&lt;/li&gt;
&lt;li&gt;赋值符号 &lt;code&gt;=&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;语法要点&#34;&gt;语法要点&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;always 里面赋值左边必须声明为 reg&lt;/li&gt;
&lt;li&gt;assign 表达式左边必须声明 wire&lt;/li&gt;
&lt;li&gt;边沿触发生成寄存器的时序逻辑&lt;/li&gt;
&lt;li&gt;电平触发条件完整，生成组合逻辑&lt;/li&gt;
&lt;li&gt;电平触发，条件不完整，生成锁存器的时序逻辑&lt;/li&gt;
&lt;li&gt;声明成 reg，不一定得到寄存器；声明成 reg，也可能得到锁存器&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;coding-要点&#34;&gt;Coding 要点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果是边沿触发的逻辑，比如 &lt;code&gt;always@(posedge clk)&lt;/code&gt;，里面一律使用 &lt;code&gt;&amp;lt;=&lt;/code&gt; 赋值&lt;/li&gt;
&lt;li&gt;如果是电平触发的逻辑，一律使用 &lt;code&gt;=&lt;/code&gt; 赋值，逻辑简单用 assign 语句；逻辑复杂，用 always 语句；分支条件写完整，防止出现锁存器&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
  </channel>
</rss>
