<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Object Detection on Preminstrel&#39;s Blog</title>
    <link>https://preminstrel.github.io/blog/categories/object-detection/</link>
    <description>Recent content in Object Detection on Preminstrel&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 17 Jan 2022 13:21:36 +0800</lastBuildDate>
    
	<atom:link href="https://preminstrel.github.io/blog/categories/object-detection/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MMDetection Head</title>
      <link>https://preminstrel.github.io/blog/post/2022/01/17/mmdetection-head/</link>
      <pubDate>Mon, 17 Jan 2022 13:21:36 +0800</pubDate>
      
      <guid>https://preminstrel.github.io/blog/post/2022/01/17/mmdetection-head/</guid>
      <description>目前 MMDetection 中 Head 模块主要是按照 stage 来划分，主要包括两个 package: dense_heads 和 roi_heads ，分别对应 two-stage 算法中的第一和第二个 stage 模块，如果是 one-stage 算法则仅仅有 dense_heads 而已。 dense_heads dense_heads 部分主要是按照</description>
    </item>
    
    <item>
      <title>MMDetection Framework</title>
      <link>https://preminstrel.github.io/blog/post/2022/01/16/mmdetection-framework/</link>
      <pubDate>Sun, 16 Jan 2022 12:42:21 +0800</pubDate>
      
      <guid>https://preminstrel.github.io/blog/post/2022/01/16/mmdetection-framework/</guid>
      <description>本文核心内容是按照抽象到具体方式，从多个层次进行训练和测试流程深入解析，从最抽象层开始，到最后核心代码实现，进一步理解 MMDetection 开源框架整体构建细节</description>
    </item>
    
    <item>
      <title>MMDetection Overview</title>
      <link>https://preminstrel.github.io/blog/post/2022/01/15/mmdetection-overview/</link>
      <pubDate>Sat, 15 Jan 2022 12:12:07 +0800</pubDate>
      
      <guid>https://preminstrel.github.io/blog/post/2022/01/15/mmdetection-overview/</guid>
      <description>MMDetection 是一个基于 PyTorch 的目标检测开源工具箱。它是 OpenMMLab 项目的一部分。目前已经复现了大部分主流和前沿模型，例如 Faster R-CNN 系列、Mask R-CNN 系列、YOLO 系列和比较</description>
    </item>
    
    <item>
      <title>Faster R-CNN</title>
      <link>https://preminstrel.github.io/blog/post/2022/01/14/faster-r-cnn/</link>
      <pubDate>Fri, 14 Jan 2022 13:32:15 +0800</pubDate>
      
      <guid>https://preminstrel.github.io/blog/post/2022/01/14/faster-r-cnn/</guid>
      <description>Faster R-CNN 可以简单看成是区域生成网络 + Fast R-CNN 的模型，用区域生成网络(Region Proposal Network, RPN)来替代 Fast R-CNN 中的选择性搜索方法，结构如下： # Pipeline 首先向 CNN 网络</description>
    </item>
    
    <item>
      <title>Fast R-CNN</title>
      <link>https://preminstrel.github.io/blog/post/2022/01/13/fast-r-cnn/</link>
      <pubDate>Thu, 13 Jan 2022 22:31:08 +0800</pubDate>
      
      <guid>https://preminstrel.github.io/blog/post/2022/01/13/fast-r-cnn/</guid>
      <description>SPP-net 的性能已经得到很大的改善，但是由于网络之间不统一训练，造成很大的麻烦，所以 Fast R-CNN 就是为了解决这样的问题。其改进的之处为：提出一个 Rol pooli</description>
    </item>
    
    <item>
      <title>SPP-net</title>
      <link>https://preminstrel.github.io/blog/post/2022/01/13/sppnet/</link>
      <pubDate>Thu, 13 Jan 2022 21:56:21 +0800</pubDate>
      
      <guid>https://preminstrel.github.io/blog/post/2022/01/13/sppnet/</guid>
      <description>SPP-net 的强大功能在目标检测中也很重要。使用 SPP-net(Spatial Pyramid Pooling-net)，我们只计算整个图像的特征图一次，然后将任意区域(子图像)中的特征池化以生</description>
    </item>
    
    <item>
      <title>R-CNN</title>
      <link>https://preminstrel.github.io/blog/post/2022/01/13/r-cnn/</link>
      <pubDate>Thu, 13 Jan 2022 12:28:23 +0800</pubDate>
      
      <guid>https://preminstrel.github.io/blog/post/2022/01/13/r-cnn/</guid>
      <description>R-CNN(Regions with CNN features)，是 R-CNN 系列的第一代算法，其实没有过多的使用“深度学习”思想，而是将 DL 和传统的 CV 的知识相结合。比如 R-CNN pipeline 中的第二步和第四</description>
    </item>
    
    <item>
      <title>Introduction to Object Detection</title>
      <link>https://preminstrel.github.io/blog/post/2022/01/12/introduction-to-object-detection/</link>
      <pubDate>Wed, 12 Jan 2022 22:06:06 +0800</pubDate>
      
      <guid>https://preminstrel.github.io/blog/post/2022/01/12/introduction-to-object-detection/</guid>
      <description>目标检测(Object Detection)的任务是找出图像中所有特定的目标，确定它们的类别和位置。由于各类物体有不同的外观和形状，加上成像时</description>
    </item>
    
  </channel>
</rss>